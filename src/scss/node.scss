.selection-outline {
	position: absolute;
	margin-left: -1px;
	margin-top: -1px;
	border: 1px solid white;
	box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
	z-index: 1;
	pointer-events: none;
}

section {
	position: absolute;
	width: 256px;
	border-radius: 8px 8px 4px 4px;
	box-shadow: 0 0 20px black;
	background: hsla(0, 0%, 25%, 0.9);
	z-index: 1;
	padding-bottom: 8px;
	transform-origin: top left;

	&.selected {
		box-shadow: none;
	}
	
	.row {
		position: relative;

		.spacer {
			height: 8px;
		}
	
		&.in label {
			text-align: left;
		}
		
		&.out:not(.in) label {
			text-align: right;
		}
	}
	
	canvas {
		width: 100%;
		height: auto;
		vertical-align: top;
	}
	
	h1,
	label {
		display: block;
		color: white;
		font-size: 14px;
		font-weight: 400;
		line-height: 24px;
		height: 24px;
		margin: 0;
		padding: 0 16px;
	}
	
	h1 {
		background: rgba(0, 156, 184, 0.8);
		border-radius: 4px 4px 0 0;
	}
	
	// Numerical input box
	label {
		position: relative;
		z-index: 10;
		pointer-events: none;

		&:focus-within {
			color: transparent;
		}
		
		&:focus-within input {
			text-align: center;
		}
	}
	
	input[type="number"] {
		-moz-appearance: textfield;
	
		&::-webkit-outer-spin-button,
		&::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
	}
	
	label input,
	select {
		z-index: -1;
		background: hsla(0, 0%, 40%, 0.8);
		display: block;
		outline: none;
		border: none;
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		margin: auto 10px;
		padding: 0 6px;
		width: calc(100% - 32px);
		height: 20px;
		border-radius: 3px;
		text-align: right;
		color: white;
		font-family: inherit;
		font-size: 14px;
		font-weight: 400;
		pointer-events: auto;
	}

	// Dropdown input box
	select {
		margin: 0;
		text-align: left;
		-moz-appearance: none;
		-webkit-appearance: none;
		appearance: none;
		width: calc(100% - 20px);
		background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='8'><path d='M4,2 L8,6 L12,2' fill='none' stroke='white' stroke-width='2' /></svg>");
		background-repeat: no-repeat;
		background-position: right 3px center;

		option {
			background: hsl(0, 0%, 10%);
		}
	}
	
	// In/out connector dots
	.connector {
		position: absolute;
		top: 0;
		bottom: 0;
		margin: auto;
		width: 10px;
		height: 10px;
		border: 1px solid white;

		&.in {
			left: -6px;
		}
		
		&.out {
			right: -6px;
		}
		
		&[data-indegree] + label input {
			display: none;
		}
		
		&[data-indegree="0"] + label input {
			display: block;
		}
		
		// Connector dot dimension shapes
		&.dimensions-0d {
			border-radius: 50%;
		}
		
		&.dimensions-1d {
			border: none;
		}
		
		&.dimensions-1d::before,
		&.dimensions-1d::after {
			content: "";
			display: block;
			width: 2px;
			height: 10px;
			position: absolute;
			top: -1px;
			border: 1px solid white;
		}
		
		&.dimensions-1d::before {
			border-radius: 2px 0 0 2px;
			border-right: none;
			left: -1px;
		}
		
		&.dimensions-1d::after {
			border-radius: 0 2px 2px 0;
			border-left: none;
			right: -1px;
		}
		
		&.dimensions-2d {
			border-radius: 2px;
		}
		
		&.dimensions-3d {
			transform: rotate(45deg);
			width: 8px;
			height: 8px;
			border-radius: 2px;
		}
		
		&.dimensions-3d.in {
			left: -5px;
		}
		
		&.dimensions-3d.out {
			right: -5px;
		}
		
		// Connector dot data type colors
		&.float {
			background: hsl(0, 0%, 20%);
		}
		
		&.float2 {
			background: hsl(0, 0%, 40%);
		}
		
		&.float3 {
			background: hsl(0, 0%, 60%);
		}
		
		&.float4 {
			background: hsl(0, 0%, 80%);
		}
		
		&.int {
			background: indigo;
		}
		
		&.bool {
			background: steelblue;
		}
		
		&.string {
			background: limegreen;
		}
		
		&.color {
			background: coral;
		}
		
		// Offsets for multiple nodes in a group
		&.group-1-of-2 {
			transform: translateY(-10px);
		}
		
		&.group-2-of-2 {
			transform: translateY(10px);
		}
		
		&.group-1-of-3 {
			transform: translateY(-20px);
		}
		
		&.group-3-of-3 {
			transform: translateY(20px);
		}
		
		&.group-1-of-4 {
			transform: translateY(-30px);
		}
		
		&.group-2-of-4 {
			transform: translateY(-10px);
		}
		
		&.group-3-of-4 {
			transform: translateY(10px);
		}
		
		&.group-4-of-4 {
			transform: translateY(30px);
		}
		
		&:hover {
			background: hsl(0, 0%, 75%);
		}
	}
}

// Wires
.wires {
	position: absolute;
	z-index: 1;
	width: 100%;
	height: 100%;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
	pointer-events: none;

	path {
		fill: none;
		stroke: #ccc;
		stroke-width: 2px;
	}
}
